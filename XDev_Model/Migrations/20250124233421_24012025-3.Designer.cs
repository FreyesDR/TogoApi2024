// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XDev_Model;

#nullable disable

namespace XDev_Model.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250124233421_24012025-3")]
    partial class _240120253
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8c5b29e5-fbb8-4cc9-871a-d61aaf739bf5",
                            RoleId = "1b9a01aa-4f39-4e6c-8012-9f0a894ea01b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XDev_Model.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RegionId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("XDev_Model.Entities.AddressEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("AddressEmail");
                });

            modelBuilder.Entity("XDev_Model.Entities.AddressPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PhoneExt")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("AddressPhone");
                });

            modelBuilder.Entity("XDev_Model.Entities.AddressType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("AddressType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f79873a7-7f73-4f29-ad1b-b345265a9738"),
                            Code = "DO",
                            ConcurrencyStamp = "f79873a7-7f73-4f29-ad1b-b345265a9738",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Domicilio"
                        },
                        new
                        {
                            Id = new Guid("b880fa62-d045-40f6-8a80-71abeaffa289"),
                            Code = "FE",
                            ConcurrencyStamp = "b880fa62-d045-40f6-8a80-71abeaffa289",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Facturación"
                        },
                        new
                        {
                            Id = new Guid("ca17d52b-7221-4476-82c4-ef77b8203d37"),
                            Code = "DL",
                            ConcurrencyStamp = "ca17d52b-7221-4476-82c4-ef77b8203d37",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Entrega"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.AppLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppLog");
                });

            modelBuilder.Entity("XDev_Model.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1b9a01aa-4f39-4e6c-8012-9f0a894ea01b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            RoleName = "Administrador de Sistema"
                        },
                        new
                        {
                            Id = "0da061ae-e10f-4516-a727-59363d4fbacc",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "user",
                            NormalizedName = "USER",
                            RoleName = "Usuario"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c5b29e5-fbb8-4cc9-871a-d61aaf739bf5",
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "8544ea20-f5da-4e11-8140-ad939d5d16d7",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@avalink.com",
                            EmailConfirmed = true,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Name = "Administrador de Sistema",
                            NormalizedEmail = "ADMIN@AVALINK.COM",
                            NormalizedUserName = "ADMIN@AVALINK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG3VrHMqyIN4gVB/lVaj6OGcuVKSCx3EJhfna64rRTI/0qlORLppSj2xkzKyeCrNKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff2e579e-69b6-4bc8-bc3d-05b6d2c10802",
                            TwoFactorEnabled = false,
                            UserName = "admin@avalink.com"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BranchTypeId");

                    b.HasIndex("Code");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("XDev_Model.Entities.BranchType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("BranchType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ca98566-a39c-41fc-bd63-237dd34eb344"),
                            Code = "01",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sucursal/Agencia"
                        },
                        new
                        {
                            Id = new Guid("ee69a655-5b95-4597-99be-9cb35ed2bd50"),
                            Code = "02",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Casa matriz"
                        },
                        new
                        {
                            Id = new Guid("34b9aa6b-657e-4d57-8bd2-41ba2a8ebc49"),
                            Code = "04",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bodega"
                        },
                        new
                        {
                            Id = new Guid("1190eda6-4aec-493b-876f-c834f8c0da9b"),
                            Code = "07",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Predio y/o patio"
                        },
                        new
                        {
                            Id = new Guid("2baf6241-db40-4291-8e80-6652f239783a"),
                            Code = "20",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Otro"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("RegionId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18f034f3-6f14-42ab-b136-0b45f4d69041"),
                            Code = "13",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ahuachapán Norte",
                            RegionId = new Guid("d1d544bd-87bb-4938-b706-a4f759634855")
                        },
                        new
                        {
                            Id = new Guid("dd502b5c-1e53-4f54-8076-0f083ed753e2"),
                            Code = "14",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ahuachapán Centro",
                            RegionId = new Guid("d1d544bd-87bb-4938-b706-a4f759634855")
                        },
                        new
                        {
                            Id = new Guid("5ca38eb9-4aa7-4781-b63f-6ccb8756ee0d"),
                            Code = "15",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ahuachapán Sur",
                            RegionId = new Guid("d1d544bd-87bb-4938-b706-a4f759634855")
                        },
                        new
                        {
                            Id = new Guid("18104203-f67f-403c-bc4d-57e4b2a99660"),
                            Code = "14",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Santa Ana Norte",
                            RegionId = new Guid("e304c87c-6253-421f-9b34-31f32bf334af")
                        },
                        new
                        {
                            Id = new Guid("618a98fd-1398-4d51-aa21-4da10282aab3"),
                            Code = "15",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Santa Ana Centro",
                            RegionId = new Guid("e304c87c-6253-421f-9b34-31f32bf334af")
                        },
                        new
                        {
                            Id = new Guid("16b8e71d-b065-422b-80e8-5f34b0ab8325"),
                            Code = "16",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Santa Ana Este",
                            RegionId = new Guid("e304c87c-6253-421f-9b34-31f32bf334af")
                        },
                        new
                        {
                            Id = new Guid("0ccf047f-a16a-4df2-84f1-19e8ff66a478"),
                            Code = "17",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Santa Ana Oeste",
                            RegionId = new Guid("e304c87c-6253-421f-9b34-31f32bf334af")
                        },
                        new
                        {
                            Id = new Guid("a159243d-f033-420f-a5fb-bc6ff14990a8"),
                            Code = "17",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sonsonate Norte",
                            RegionId = new Guid("a5dd1706-916c-4fa2-9d00-20c1b7fa60a8")
                        },
                        new
                        {
                            Id = new Guid("4f0336a6-af12-40eb-9e31-feae9ed39ad1"),
                            Code = "18",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sonsonate Centro",
                            RegionId = new Guid("a5dd1706-916c-4fa2-9d00-20c1b7fa60a8")
                        },
                        new
                        {
                            Id = new Guid("e6505b36-f339-4f4d-a89f-4c7f94ec9a69"),
                            Code = "19",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sonsonate Este",
                            RegionId = new Guid("a5dd1706-916c-4fa2-9d00-20c1b7fa60a8")
                        },
                        new
                        {
                            Id = new Guid("6170dfff-3bfd-4761-af82-f429615e6e2a"),
                            Code = "20",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sonsonate Oeste",
                            RegionId = new Guid("a5dd1706-916c-4fa2-9d00-20c1b7fa60a8")
                        },
                        new
                        {
                            Id = new Guid("55be3620-bbc8-448a-9414-cf072ada0e66"),
                            Code = "34",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chalatenango Norte",
                            RegionId = new Guid("cee1a53c-864a-4067-a321-07e14a672536")
                        },
                        new
                        {
                            Id = new Guid("7fb4517c-3bfb-4a18-adde-4fb1ecffaddc"),
                            Code = "35",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chalatenango Centro",
                            RegionId = new Guid("cee1a53c-864a-4067-a321-07e14a672536")
                        },
                        new
                        {
                            Id = new Guid("a675251d-7724-4518-854c-63702c3d9ad7"),
                            Code = "35",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chalatenango Sur",
                            RegionId = new Guid("cee1a53c-864a-4067-a321-07e14a672536")
                        },
                        new
                        {
                            Id = new Guid("c9e803de-0b24-44f7-817a-ee573f916fc8"),
                            Code = "23",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Libertad Norte",
                            RegionId = new Guid("9db618b7-d112-4e22-bed7-43ed14c930cf")
                        },
                        new
                        {
                            Id = new Guid("07da0c22-42c9-4c6e-94c0-1ed0a77338a6"),
                            Code = "24",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Libertad Centro",
                            RegionId = new Guid("9db618b7-d112-4e22-bed7-43ed14c930cf")
                        },
                        new
                        {
                            Id = new Guid("b4570640-2ced-4b69-9b11-ee627d837f54"),
                            Code = "25",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Libertad Oeste",
                            RegionId = new Guid("9db618b7-d112-4e22-bed7-43ed14c930cf")
                        },
                        new
                        {
                            Id = new Guid("344e3a42-bc56-4312-a1dc-3291ae8b960c"),
                            Code = "26",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Libertad Este",
                            RegionId = new Guid("9db618b7-d112-4e22-bed7-43ed14c930cf")
                        },
                        new
                        {
                            Id = new Guid("482bc1a5-d37c-4d8f-8fb5-12645a257372"),
                            Code = "27",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Libertad Costa",
                            RegionId = new Guid("9db618b7-d112-4e22-bed7-43ed14c930cf")
                        },
                        new
                        {
                            Id = new Guid("250d6f4a-b0dd-4cf2-820f-b687a48d5411"),
                            Code = "28",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Libertad Sur",
                            RegionId = new Guid("9db618b7-d112-4e22-bed7-43ed14c930cf")
                        },
                        new
                        {
                            Id = new Guid("b2fb4766-2c8e-496e-baa8-1ea23198eb6f"),
                            Code = "20",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Salvador Norte",
                            RegionId = new Guid("60873ca6-590b-4f63-b680-a4fc38338de5")
                        },
                        new
                        {
                            Id = new Guid("c4ec20e4-9827-4763-9d26-b794d07edad4"),
                            Code = "21",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Salvador Oeste",
                            RegionId = new Guid("60873ca6-590b-4f63-b680-a4fc38338de5")
                        },
                        new
                        {
                            Id = new Guid("48950ab6-a7cb-4dd3-b3b8-07d206d6edee"),
                            Code = "22",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Salvador Este",
                            RegionId = new Guid("60873ca6-590b-4f63-b680-a4fc38338de5")
                        },
                        new
                        {
                            Id = new Guid("c9bb2770-5bb3-40ae-a13b-49c1bb1756fe"),
                            Code = "23",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Salvador Centro",
                            RegionId = new Guid("60873ca6-590b-4f63-b680-a4fc38338de5")
                        },
                        new
                        {
                            Id = new Guid("86dc9ec6-18fc-4b6c-80d9-c9958b47ff09"),
                            Code = "24",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Salvador Sur",
                            RegionId = new Guid("60873ca6-590b-4f63-b680-a4fc38338de5")
                        },
                        new
                        {
                            Id = new Guid("9ce12c0c-ec42-45e3-ace0-3068108ecfdc"),
                            Code = "17",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cuscatlán Norte",
                            RegionId = new Guid("06bea8a8-5c85-4523-87fd-dde6b981d2fd")
                        },
                        new
                        {
                            Id = new Guid("1e445660-55ed-48f5-94da-bc82a39a19a7"),
                            Code = "18",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cuscatlán Sur",
                            RegionId = new Guid("06bea8a8-5c85-4523-87fd-dde6b981d2fd")
                        },
                        new
                        {
                            Id = new Guid("d9e42bc5-6735-4970-9e07-da3ee30846b1"),
                            Code = "23",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Paz Oeste",
                            RegionId = new Guid("a673111d-5d43-4ef9-bd8a-e22c0d626ad3")
                        },
                        new
                        {
                            Id = new Guid("b1eb55d2-861b-4e7b-ab23-87e5cad5589e"),
                            Code = "24",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Paz Centro",
                            RegionId = new Guid("a673111d-5d43-4ef9-bd8a-e22c0d626ad3")
                        },
                        new
                        {
                            Id = new Guid("89cc4d95-696b-41d9-b6ac-8bdf16edc5c4"),
                            Code = "25",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Paz Este",
                            RegionId = new Guid("a673111d-5d43-4ef9-bd8a-e22c0d626ad3")
                        },
                        new
                        {
                            Id = new Guid("64c92aba-4806-4c3b-8d81-7eeb330ed99f"),
                            Code = "10",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cabañas Oeste",
                            RegionId = new Guid("581ff0b4-7fb5-4702-8ff8-e040a93aa669")
                        },
                        new
                        {
                            Id = new Guid("a51b63d3-833b-470c-8d45-55ab7813a5b6"),
                            Code = "11",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cabañas Este",
                            RegionId = new Guid("581ff0b4-7fb5-4702-8ff8-e040a93aa669")
                        },
                        new
                        {
                            Id = new Guid("629daa24-d3cc-479a-b6df-ec82f3c9eb59"),
                            Code = "14",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Vicente Norte",
                            RegionId = new Guid("d7647a83-a047-426b-976d-77ec7b62e9f2")
                        },
                        new
                        {
                            Id = new Guid("f0e33c30-a55b-47af-a4a7-394838d9b5e7"),
                            Code = "15",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Vicente Sur",
                            RegionId = new Guid("d7647a83-a047-426b-976d-77ec7b62e9f2")
                        },
                        new
                        {
                            Id = new Guid("1b37faab-df87-41a5-83fb-849964858948"),
                            Code = "24",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Usulután Norte",
                            RegionId = new Guid("e6651357-535d-489c-9d58-0fd514df9c08")
                        },
                        new
                        {
                            Id = new Guid("5e6d2441-9e29-4ca0-b280-c172b77c21c0"),
                            Code = "25",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Usulután Este",
                            RegionId = new Guid("e6651357-535d-489c-9d58-0fd514df9c08")
                        },
                        new
                        {
                            Id = new Guid("077fe4b8-1725-43af-8f60-b5ab6a37fa1d"),
                            Code = "26",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Usulután Oeste",
                            RegionId = new Guid("e6651357-535d-489c-9d58-0fd514df9c08")
                        },
                        new
                        {
                            Id = new Guid("62f027d6-a995-4f75-8db9-661d32c6f350"),
                            Code = "21",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Miguel Norte",
                            RegionId = new Guid("68792ae9-a79d-4c01-b0b8-fdd27d90eee8")
                        },
                        new
                        {
                            Id = new Guid("fbe21ebf-4ecf-4065-8026-9eccc562df68"),
                            Code = "22",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Miguel Centro",
                            RegionId = new Guid("68792ae9-a79d-4c01-b0b8-fdd27d90eee8")
                        },
                        new
                        {
                            Id = new Guid("96170536-93df-453b-9449-ac0ba51773b2"),
                            Code = "23",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Miguel Oeste",
                            RegionId = new Guid("68792ae9-a79d-4c01-b0b8-fdd27d90eee8")
                        },
                        new
                        {
                            Id = new Guid("ce1dd042-4fbd-4ffc-8742-2d370a434afb"),
                            Code = "27",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morazán Norte",
                            RegionId = new Guid("0cabeef6-210c-4e02-b826-4d0dd12435ca")
                        },
                        new
                        {
                            Id = new Guid("9b8604b8-26b2-446c-9756-32f8754f1b17"),
                            Code = "28",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morazán Sur",
                            RegionId = new Guid("0cabeef6-210c-4e02-b826-4d0dd12435ca")
                        },
                        new
                        {
                            Id = new Guid("8e9b24f6-20cd-4aa0-9948-c4751496f015"),
                            Code = "19",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Unión Norte",
                            RegionId = new Guid("4bb49b77-bb90-41b2-91fd-52badd37c844")
                        },
                        new
                        {
                            Id = new Guid("698f82d6-e58b-494f-ac81-167bda60f538"),
                            Code = "20",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Unión Sur",
                            RegionId = new Guid("4bb49b77-bb90-41b2-91fd-52badd37c844")
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TradeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("XDev_Model.Entities.CompanyEconomicActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("EconomicActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EconomicActivityId");

                    b.ToTable("CompanyEconomicActivities");
                });

            modelBuilder.Entity("XDev_Model.Entities.CompanyID", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DateExpira")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("IDTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NIFNum")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IDTypeId");

                    b.ToTable("CompanyID");
                });

            modelBuilder.Entity("XDev_Model.Entities.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("CompanyType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf579d9d-18f9-432b-806a-4cad7311fb38"),
                            Code = "N",
                            ConcurrencyStamp = "cf579d9d-18f9-432b-806a-4cad7311fb38",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Persona Natural"
                        },
                        new
                        {
                            Id = new Guid("099a35d5-fddf-486d-b3b7-ba8011b1a7ff"),
                            Code = "J",
                            ConcurrencyStamp = "099a35d5-fddf-486d-b3b7-ba8011b1a7ff",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jurídica"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CodeMH")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CodeMH");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            Code = "SV",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "El Salvador"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ISOCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf579d9d-18f9-432b-806a-4cad7311fb38"),
                            Code = "USD",
                            ConcurrencyStamp = "cf579d9d-18f9-432b-806a-4cad7311fb38",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dólar Estadounidense"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.EBilling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlProd")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlSigner")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlTest")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("EBilling");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63be85df-6805-41c3-beb2-f6a44db746f6"),
                            Code = "MHSV",
                            ConcurrencyStamp = "63be85df-6805-41c3-beb2-f6a44db746f6",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ministerio de Hacienda de El Salvador",
                            UrlProd = "https://api.dtes.mh.gob.sv",
                            UrlSigner = "http://localhost:8113",
                            UrlTest = "https://apitest.dtes.mh.gob.sv"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.EBillingCompany", b =>
                {
                    b.Property<Guid>("EBillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsProd")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("Nif1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Nif2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EBillingId", "CompanyId");

                    b.ToTable("EBillingCompany");
                });

            modelBuilder.Entity("XDev_Model.Entities.EBillingCompanyInvoice", b =>
                {
                    b.Property<Guid>("EBillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Current")
                        .HasColumnType("bigint");

                    b.Property<Guid>("EBillingDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NextReStart")
                        .HasColumnType("int");

                    b.Property<long>("RangeEnd")
                        .HasColumnType("bigint");

                    b.Property<long>("RangeStart")
                        .HasColumnType("bigint");

                    b.Property<bool>("ReStartYear")
                        .HasColumnType("bit");

                    b.HasKey("EBillingId", "CompanyId", "InvoiceTypeId");

                    b.ToTable("EBillingCompanyInvoice");
                });

            modelBuilder.Entity("XDev_Model.Entities.EBillingDocument", b =>
                {
                    b.Property<Guid>("EBillingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EBillingId", "Id");

                    b.HasIndex("Code");

                    b.ToTable("EBillingDocument");

                    b.HasData(
                        new
                        {
                            EBillingId = new Guid("63be85df-6805-41c3-beb2-f6a44db746f6"),
                            Id = new Guid("6d339ff2-e58c-4eba-95e9-dd0df0d1abbe"),
                            Code = "01",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Factura"
                        },
                        new
                        {
                            EBillingId = new Guid("63be85df-6805-41c3-beb2-f6a44db746f6"),
                            Id = new Guid("d4a32bf7-a3dd-4623-81f4-5a9994e6c9d0"),
                            Code = "03",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comprobante crédito fiscal"
                        },
                        new
                        {
                            EBillingId = new Guid("63be85df-6805-41c3-beb2-f6a44db746f6"),
                            Id = new Guid("1dc5c31b-adb6-40b7-8523-5a91ecaea5a3"),
                            Code = "05",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nota de crédito"
                        },
                        new
                        {
                            EBillingId = new Guid("63be85df-6805-41c3-beb2-f6a44db746f6"),
                            Id = new Guid("9ca389cf-65aa-4b54-bb1b-0080efaa6cb2"),
                            Code = "06",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nota de débito"
                        },
                        new
                        {
                            EBillingId = new Guid("63be85df-6805-41c3-beb2-f6a44db746f6"),
                            Id = new Guid("1f0e23ab-5e6b-4fca-936e-fb1ea18b40af"),
                            Code = "11",
                            ConcurrencyStamp = "24dd7daf-bc2c-4a25-9a8e-c056b4eb1a8a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Factura exportador"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.EconomicActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("EconomicActivities");
                });

            modelBuilder.Entity("XDev_Model.Entities.IDType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("IDType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e4d4e92-7932-4310-8cda-39b8bdba8d07"),
                            AltCode = "36",
                            Code = "NIT",
                            ConcurrencyStamp = "3e4d4e92-7932-4310-8cda-39b8bdba8d07",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NIT"
                        },
                        new
                        {
                            Id = new Guid("acae8706-50e1-4296-aacd-bd1d59b946d1"),
                            AltCode = "13",
                            Code = "DUI",
                            ConcurrencyStamp = "acae8706-50e1-4296-aacd-bd1d59b946d1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DUI"
                        },
                        new
                        {
                            Id = new Guid("429ff286-4d34-42c6-8e6b-254a8d4fa79e"),
                            AltCode = "37",
                            Code = "OTH",
                            ConcurrencyStamp = "429ff286-4d34-42c6-8e6b-254a8d4fa79e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Otro"
                        },
                        new
                        {
                            Id = new Guid("132a6258-f433-4345-9da1-cc9cfd0b64ac"),
                            AltCode = "03",
                            Code = "PAS",
                            ConcurrencyStamp = "132a6258-f433-4345-9da1-cc9cfd0b64ac",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pasaporte"
                        },
                        new
                        {
                            Id = new Guid("822ac932-46ab-4588-8f82-fbafb14e27eb"),
                            AltCode = "02",
                            Code = "CR",
                            ConcurrencyStamp = "822ac932-46ab-4588-8f82-fbafb14e27eb",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carnet Residente"
                        },
                        new
                        {
                            Id = new Guid("7ae985b6-e461-4a66-b028-badf1f16f9f0"),
                            AltCode = "",
                            Code = "NRC",
                            ConcurrencyStamp = "7ae985b6-e461-4a66-b028-badf1f16f9f0",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Número Registro Contribuyente"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Canceled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CanceledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CanceledUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodGeneración")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumControl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Per1")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("PointSaleCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RefDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefDocument")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Ret1")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Ret10")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SelloRecepcion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Sporadic")
                        .HasColumnType("bit");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoicePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialTypeCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("PriceType")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitMeasureAltCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("UnitMeasureCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("UnitMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoicePosition");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoicePositionCondition", b =>
                {
                    b.Property<Guid>("InvoicePositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseCondition")
                        .HasPrecision(18, 7)
                        .HasColumnType("decimal(18,7)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("SourceConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 7)
                        .HasColumnType("decimal(18,7)");

                    b.Property<decimal>("ValueCondition")
                        .HasPrecision(18, 7)
                        .HasColumnType("decimal(18,7)");

                    b.Property<string>("ValueType")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("InvoicePositionId", "PriceConditionId");

                    b.HasIndex("Code");

                    b.ToTable("InvoicePositionCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoiceSporadicPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CityCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EcoActivityCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("EcoActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EcoActivityName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IDCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("IDTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("InvoiceSporadicPartner");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RangeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("InvoiceType");
                });

            modelBuilder.Entity("XDev_Model.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OldCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceType")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<Guid>("UnitMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("XDev_Model.Entities.MaterialBranch", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsLockedPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedSale")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("PricePurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceSale")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MaterialId", "BranchId");

                    b.ToTable("MaterialBranch");
                });

            modelBuilder.Entity("XDev_Model.Entities.MaterialFeatures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short>("NumType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("RangeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RangeId")
                        .IsUnique();

                    b.ToTable("MaterialFeatures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ca98566-a39c-41fc-bd63-237dd34eb344"),
                            ConcurrencyStamp = "7ca98566-a39c-41fc-bd63-237dd34eb344",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumType = (short)0,
                            RangeId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.MaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("MaterialType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f8d6ce6-6177-4892-843a-11e2af8aa134"),
                            Code = "B",
                            ConcurrencyStamp = "0f8d6ce6-6177-4892-843a-11e2af8aa134",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bienes"
                        },
                        new
                        {
                            Id = new Guid("691f3725-3ef8-434b-aecf-b663791cc501"),
                            Code = "S",
                            ConcurrencyStamp = "691f3725-3ef8-434b-aecf-b663791cc501",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Servicios"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.MaterialWareHouse", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("InTransitStock")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("LockedStock")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("PurchasedStock")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("SoldStock")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("Stock")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("MaterialId", "BranchId", "WareHouseId");

                    b.ToTable("MaterialWareHouse");
                });

            modelBuilder.Entity("XDev_Model.Entities.MeanOfPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PaymentConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("PaymentConditionId");

                    b.ToTable("MeanOfPayment");
                });

            modelBuilder.Entity("XDev_Model.Entities.NumberRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("NumCurrent")
                        .HasColumnType("bigint");

                    b.Property<long>("NumEnd")
                        .HasColumnType("bigint");

                    b.Property<long>("NumStart")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NumberRange");
                });

            modelBuilder.Entity("XDev_Model.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OldCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("PartnerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TradeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("OldCode");

                    b.HasIndex("PartnerTypeId");

                    b.HasIndex("PaymentConditionId");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerCompany", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartnerId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerCompany");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerEconomicActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("EconomicActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EconomicActivityId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerEconomicActivity");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerFeatures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short>("NumType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("RangeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RangeId")
                        .IsUnique();

                    b.ToTable("PartnerFeatures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ca98566-a39c-41fc-bd63-237dd34eb344"),
                            ConcurrencyStamp = "7ca98566-a39c-41fc-bd63-237dd34eb344",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumType = (short)0,
                            RangeId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerID", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DateExpira")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("IDTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NIFNum")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IDTypeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerID");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("PartnerRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf579d9d-18f9-432b-806a-4cad7311fb38"),
                            Code = "D",
                            ConcurrencyStamp = "cf579d9d-18f9-432b-806a-4cad7311fb38",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cliente (Deudor)"
                        },
                        new
                        {
                            Id = new Guid("099a35d5-fddf-486d-b3b7-ba8011b1a7ff"),
                            Code = "A",
                            ConcurrencyStamp = "099a35d5-fddf-486d-b3b7-ba8011b1a7ff",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Proveedor (Acreedor)"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerRoles", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RoleId");

                    b.ToTable("PartnerRoles");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("PartnerType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf579d9d-18f9-432b-806a-4cad7311fb38"),
                            Code = "P",
                            ConcurrencyStamp = "cf579d9d-18f9-432b-806a-4cad7311fb38",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Persona"
                        },
                        new
                        {
                            Id = new Guid("099a35d5-fddf-486d-b3b7-ba8011b1a7ff"),
                            Code = "O",
                            ConcurrencyStamp = "099a35d5-fddf-486d-b3b7-ba8011b1a7ff",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organización"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.PaymentCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Plazo")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("PlazoCount")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("PaymentCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.PointSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("Code");

                    b.ToTable("PointSale");
                });

            modelBuilder.Entity("XDev_Model.Entities.PriceCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Source")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("SourceConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ValueType")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("PriceCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.PriceScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("PriceScheme");
                });

            modelBuilder.Entity("XDev_Model.Entities.PriceSchemeCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short>("Position")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PriceConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceSchemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceConditionId");

                    b.HasIndex("PriceSchemeId");

                    b.ToTable("PriceSchemeCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CountryId");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e304c87c-6253-421f-9b34-31f32bf334af"),
                            Code = "02",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Santa Ana"
                        },
                        new
                        {
                            Id = new Guid("d1d544bd-87bb-4938-b706-a4f759634855"),
                            Code = "01",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ahuachapán"
                        },
                        new
                        {
                            Id = new Guid("a5dd1706-916c-4fa2-9d00-20c1b7fa60a8"),
                            Code = "03",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sonsonate"
                        },
                        new
                        {
                            Id = new Guid("9db618b7-d112-4e22-bed7-43ed14c930cf"),
                            Code = "05",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Libertad"
                        },
                        new
                        {
                            Id = new Guid("cee1a53c-864a-4067-a321-07e14a672536"),
                            Code = "04",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chalatenango"
                        },
                        new
                        {
                            Id = new Guid("60873ca6-590b-4f63-b680-a4fc38338de5"),
                            Code = "06",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Salvador"
                        },
                        new
                        {
                            Id = new Guid("581ff0b4-7fb5-4702-8ff8-e040a93aa669"),
                            Code = "09",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cabañas"
                        },
                        new
                        {
                            Id = new Guid("06bea8a8-5c85-4523-87fd-dde6b981d2fd"),
                            Code = "07",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cuscatlán"
                        },
                        new
                        {
                            Id = new Guid("a673111d-5d43-4ef9-bd8a-e22c0d626ad3"),
                            Code = "08",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Paz"
                        },
                        new
                        {
                            Id = new Guid("d7647a83-a047-426b-976d-77ec7b62e9f2"),
                            Code = "10",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Viciente"
                        },
                        new
                        {
                            Id = new Guid("e6651357-535d-489c-9d58-0fd514df9c08"),
                            Code = "11",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Usulután"
                        },
                        new
                        {
                            Id = new Guid("0cabeef6-210c-4e02-b826-4d0dd12435ca"),
                            Code = "13",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morazán"
                        },
                        new
                        {
                            Id = new Guid("68792ae9-a79d-4c01-b0b8-fdd27d90eee8"),
                            Code = "12",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Miguel"
                        },
                        new
                        {
                            Id = new Guid("4bb49b77-bb90-41b2-91fd-52badd37c844"),
                            Code = "14",
                            ConcurrencyStamp = "e4100766-8988-47c0-97aa-34be5e88bb44",
                            CountryId = new Guid("e4100766-8988-47c0-97aa-34be5e88bb44"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Unión"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<bool>("Invoiced")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Per1")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("PointSaleCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("PointSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RefDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefDocument")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Ret1")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Ret10")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<Guid>("SaleOrderTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Sporadic")
                        .HasColumnType("bit");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("SaleOrder");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialTypeCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("PriceType")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitMeasureAltCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("UnitMeasureCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid>("UnitMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderPosition");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderPositionCondition", b =>
                {
                    b.Property<Guid>("SaleOrderPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseCondition")
                        .HasPrecision(18, 7)
                        .HasColumnType("decimal(18,7)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("SourceConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 7)
                        .HasColumnType("decimal(18,7)");

                    b.Property<decimal>("ValueCondition")
                        .HasPrecision(18, 7)
                        .HasColumnType("decimal(18,7)");

                    b.Property<string>("ValueType")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("SaleOrderPositionId", "PriceConditionId");

                    b.HasIndex("Code");

                    b.ToTable("SaleOrderPositionCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderSporadicPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CityCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EcoActivityCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("EcoActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EcoActivityName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IDCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("IDTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SaleOrderId")
                        .IsUnique();

                    b.ToTable("SaleOrderSporadicPartner");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApplyPer1")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyRet1")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyRet10")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Delivery")
                        .HasColumnType("bit");

                    b.Property<string>("Inventory")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("Invoice")
                        .HasColumnType("bit");

                    b.Property<Guid>("InvoiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PdfFormName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PriceSchemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RangeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("SaleOrderType");
                });

            modelBuilder.Entity("XDev_Model.Entities.UnitMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("UnitMeasure");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07f1cfbc-2b69-4c76-910c-e1c38eeaa9fc"),
                            AltCode = "59",
                            Code = "UN",
                            ConcurrencyStamp = "07f1cfbc-2b69-4c76-910c-e1c38eeaa9fc",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Unidad"
                        });
                });

            modelBuilder.Entity("XDev_Model.Entities.WareHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("Code");

                    b.ToTable("WareHouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("XDev_Model.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XDev_Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XDev_Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("XDev_Model.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XDev_Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XDev_Model.Entities.Address", b =>
                {
                    b.HasOne("XDev_Model.Entities.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.Branch", "Branch")
                        .WithMany("Addresses")
                        .HasForeignKey("BranchId");

                    b.HasOne("XDev_Model.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("XDev_Model.Entities.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XDev_Model.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("XDev_Model.Entities.Partner", "Partner")
                        .WithMany("Addresses")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XDev_Model.Entities.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId");

                    b.Navigation("AddressType");

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Partner");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("XDev_Model.Entities.AddressEmail", b =>
                {
                    b.HasOne("XDev_Model.Entities.Address", "Address")
                        .WithMany("Emails")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("XDev_Model.Entities.AddressPhone", b =>
                {
                    b.HasOne("XDev_Model.Entities.Address", null)
                        .WithMany("Phones")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XDev_Model.Entities.Branch", b =>
                {
                    b.HasOne("XDev_Model.Entities.BranchType", "BranchType")
                        .WithMany("Branches")
                        .HasForeignKey("BranchTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchType");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("XDev_Model.Entities.City", b =>
                {
                    b.HasOne("XDev_Model.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("XDev_Model.Entities.Company", b =>
                {
                    b.HasOne("XDev_Model.Entities.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("XDev_Model.Entities.CompanyEconomicActivity", b =>
                {
                    b.HasOne("XDev_Model.Entities.Company", "Company")
                        .WithMany("CompanyEconomicActivities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.EconomicActivity", "EconomicActivity")
                        .WithMany("CompanyEconomicActivities")
                        .HasForeignKey("EconomicActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("EconomicActivity");
                });

            modelBuilder.Entity("XDev_Model.Entities.CompanyID", b =>
                {
                    b.HasOne("XDev_Model.Entities.Company", "Company")
                        .WithMany("CompanyIDS")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.IDType", "IDType")
                        .WithMany("CompanyIDS")
                        .HasForeignKey("IDTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("IDType");
                });

            modelBuilder.Entity("XDev_Model.Entities.EBillingCompany", b =>
                {
                    b.HasOne("XDev_Model.Entities.EBilling", "EBilling")
                        .WithMany("Companies")
                        .HasForeignKey("EBillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EBilling");
                });

            modelBuilder.Entity("XDev_Model.Entities.EBillingCompanyInvoice", b =>
                {
                    b.HasOne("XDev_Model.Entities.EBillingCompany", "EBillingCompany")
                        .WithMany("Invoice")
                        .HasForeignKey("EBillingId", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EBillingCompany");
                });

            modelBuilder.Entity("XDev_Model.Entities.EBillingDocument", b =>
                {
                    b.HasOne("XDev_Model.Entities.EBilling", "EBilling")
                        .WithMany()
                        .HasForeignKey("EBillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EBilling");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoicePosition", b =>
                {
                    b.HasOne("XDev_Model.Entities.Invoice", "Invoice")
                        .WithMany("Positions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoicePositionCondition", b =>
                {
                    b.HasOne("XDev_Model.Entities.InvoicePosition", "InvoicePosition")
                        .WithMany("Conditions")
                        .HasForeignKey("InvoicePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoicePosition");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoiceSporadicPartner", b =>
                {
                    b.HasOne("XDev_Model.Entities.Invoice", "Invoice")
                        .WithOne("InvoiceSporadicPartner")
                        .HasForeignKey("XDev_Model.Entities.InvoiceSporadicPartner", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("XDev_Model.Entities.Material", b =>
                {
                    b.HasOne("XDev_Model.Entities.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("XDev_Model.Entities.MeanOfPayment", b =>
                {
                    b.HasOne("XDev_Model.Entities.PaymentCondition", "PaymentCondition")
                        .WithMany("MeansOfPayment")
                        .HasForeignKey("PaymentConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.Partner", b =>
                {
                    b.HasOne("XDev_Model.Entities.PartnerType", "PartnerType")
                        .WithMany("Partners")
                        .HasForeignKey("PartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.PaymentCondition", "PaymentCondition")
                        .WithMany("Partners")
                        .HasForeignKey("PaymentConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PartnerType");

                    b.Navigation("PaymentCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerCompany", b =>
                {
                    b.HasOne("XDev_Model.Entities.Company", "Company")
                        .WithMany("Partners")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.Partner", "Partner")
                        .WithMany("Companies")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerEconomicActivity", b =>
                {
                    b.HasOne("XDev_Model.Entities.EconomicActivity", "EconomicActivity")
                        .WithMany("PartnerEconomicActivities")
                        .HasForeignKey("EconomicActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.Partner", "Partner")
                        .WithMany("EconomicActivities")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EconomicActivity");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerID", b =>
                {
                    b.HasOne("XDev_Model.Entities.IDType", "IDType")
                        .WithMany("PartnerIDS")
                        .HasForeignKey("IDTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.Partner", "Partner")
                        .WithMany("PartnerIDS")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IDType");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerRoles", b =>
                {
                    b.HasOne("XDev_Model.Entities.Partner", "Partner")
                        .WithMany("Roles")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.PartnerRole", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("XDev_Model.Entities.PointSale", b =>
                {
                    b.HasOne("XDev_Model.Entities.Branch", "Branch")
                        .WithMany("PointsSale")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("XDev_Model.Entities.PriceSchemeCondition", b =>
                {
                    b.HasOne("XDev_Model.Entities.PriceCondition", "PriceCondition")
                        .WithMany("PriceSchemeCondition")
                        .HasForeignKey("PriceConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XDev_Model.Entities.PriceScheme", "PriceScheme")
                        .WithMany("Conditions")
                        .HasForeignKey("PriceSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceCondition");

                    b.Navigation("PriceScheme");
                });

            modelBuilder.Entity("XDev_Model.Entities.Region", b =>
                {
                    b.HasOne("XDev_Model.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderPosition", b =>
                {
                    b.HasOne("XDev_Model.Entities.SaleOrder", "SaleOrder")
                        .WithMany("Positions")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderPositionCondition", b =>
                {
                    b.HasOne("XDev_Model.Entities.SaleOrderPosition", "SaleOrderPosition")
                        .WithMany("Conditions")
                        .HasForeignKey("SaleOrderPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleOrderPosition");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderSporadicPartner", b =>
                {
                    b.HasOne("XDev_Model.Entities.SaleOrder", "SaleOrder")
                        .WithOne("SaleOrderSporadicPartner")
                        .HasForeignKey("XDev_Model.Entities.SaleOrderSporadicPartner", "SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("XDev_Model.Entities.WareHouse", b =>
                {
                    b.HasOne("XDev_Model.Entities.Branch", "Branch")
                        .WithMany("WareHouses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("XDev_Model.Entities.Address", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("XDev_Model.Entities.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("XDev_Model.Entities.Branch", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("PointsSale");

                    b.Navigation("WareHouses");
                });

            modelBuilder.Entity("XDev_Model.Entities.BranchType", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("XDev_Model.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("XDev_Model.Entities.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Branches");

                    b.Navigation("CompanyEconomicActivities");

                    b.Navigation("CompanyIDS");

                    b.Navigation("Partners");
                });

            modelBuilder.Entity("XDev_Model.Entities.CompanyType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("XDev_Model.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("XDev_Model.Entities.EBilling", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("XDev_Model.Entities.EBillingCompany", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("XDev_Model.Entities.EconomicActivity", b =>
                {
                    b.Navigation("CompanyEconomicActivities");

                    b.Navigation("PartnerEconomicActivities");
                });

            modelBuilder.Entity("XDev_Model.Entities.IDType", b =>
                {
                    b.Navigation("CompanyIDS");

                    b.Navigation("PartnerIDS");
                });

            modelBuilder.Entity("XDev_Model.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceSporadicPartner");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("XDev_Model.Entities.InvoicePosition", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("XDev_Model.Entities.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("XDev_Model.Entities.Partner", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Companies");

                    b.Navigation("EconomicActivities");

                    b.Navigation("PartnerIDS");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerRole", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("XDev_Model.Entities.PartnerType", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("XDev_Model.Entities.PaymentCondition", b =>
                {
                    b.Navigation("MeansOfPayment");

                    b.Navigation("Partners");
                });

            modelBuilder.Entity("XDev_Model.Entities.PriceCondition", b =>
                {
                    b.Navigation("PriceSchemeCondition");
                });

            modelBuilder.Entity("XDev_Model.Entities.PriceScheme", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("XDev_Model.Entities.Region", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrder", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("SaleOrderSporadicPartner");
                });

            modelBuilder.Entity("XDev_Model.Entities.SaleOrderPosition", b =>
                {
                    b.Navigation("Conditions");
                });
#pragma warning restore 612, 618
        }
    }
}
